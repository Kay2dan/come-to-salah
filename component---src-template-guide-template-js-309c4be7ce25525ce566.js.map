{"version":3,"sources":["webpack:///./src/components/GuideContent.js","webpack:///./src/template/GuideTemplate.js","webpack:///./src/components/RecitationSection.js","webpack:///./src/components/DomContent.js"],"names":["GuideContent","data","map","eachSection","k","id","heading","content","key","isSize","contentObj","i","DomContent","removeSpecialCharactersAndCapitaliseFirstLetter","str","newStr","replace","charAt","toLowerCase","slice","query","GuideTemplate","allDataJson","edges","node","pagination","sections","title","previous","next","prevLink","nextLink","className","disabled","length","to","RecitationSection","recitationId","recitations","find","passage","arabic","transliteration","translation","word","recitationRender","markup","classes","eleType","insertion","txt","recitationLocation","location","undefined","val","j","para"],"mappings":"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","file":"component---src-template-guide-template-js-309c4be7ce25525ce566.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Section, Title } from \"bloomer\";\nimport DomContent from \"./DomContent\";\n\n/**\n *\n *          This func calls the DomContent func below to parse\n *          the html & the content within, & returns the\n *          structure within its own wrapper element tags.\n *          @param {data} container obj for all content for page\n */\nconst GuideContent = ({ data }) => (\n  <Section>\n    {data.map((eachSection, k) => {\n      const { id, heading, content } = eachSection;\n      return (\n        <div key={k}>\n          <Title isSize={3} id={id}>\n            {heading}\n          </Title>\n          {content.map((contentObj, i) => (\n            <DomContent contentObj={contentObj} key={i} />\n          ))}\n        </div>\n      );\n    })}\n  </Section>\n);\n\nGuideContent.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default GuideContent;\n","import React from \"react\";\nimport { graphql, Link } from \"gatsby\";\nimport { PageControl, Pagination, Title } from \"bloomer\";\nimport PropTypes from \"prop-types\";\nimport GuideContent from \"../components/GuideContent\";\nimport \"../styles/guideTemplate.sass\";\n\nconst removeSpecialCharactersAndCapitaliseFirstLetter = str => {\n  let newStr = str.replace(/[^\\w]/g, \"\");\n  return newStr.charAt(0).toLowerCase() + newStr.slice(1);\n};\n\nconst GuideTemplate = ({ data }) => {\n  const { id, pagination, sections, title } = data.allDataJson.edges[0].node;\n  const { previous, next } = pagination;\n  const prevLink = removeSpecialCharactersAndCapitaliseFirstLetter(previous);\n  const nextLink = removeSpecialCharactersAndCapitaliseFirstLetter(next);\n  return (\n    <div className=\"salahGuideContainer\">\n      <Title isSize={2} id={id}>\n        {title}\n      </Title>\n      <GuideContent data={sections} />\n      <Pagination>\n        <PageControl disabled={previous.length === 0 ? true : false}>\n          <Link to={prevLink}>Previous</Link>\n        </PageControl>\n        <PageControl disabled={next.length === 0 ? true : false}>\n          <Link to={nextLink}>Next</Link>\n        </PageControl>\n      </Pagination>\n    </div>\n  );\n};\n\nexport const query = graphql`\n  query($heading: String!) {\n    allDataJson(filter: { title: { eq: $heading } }) {\n      edges {\n        node {\n          id\n          title\n          pagination {\n            previous\n            next\n          }\n          sections {\n            id\n            heading\n            content {\n              id\n              classes\n              eleType\n              insertion {\n                location\n              }\n              txt\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nGuideTemplate.propTypes = {\n  data: PropTypes.object.isRequired\n};\n\nexport default GuideTemplate;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst RecitationSection = ({ recitationId, recitations }) => {\n  const { arabic, transliteration, translation } = recitations.find(\n    passage => passage.id === recitationId[0]\n  );\n  return (\n    <div className=\"recitationTable\">\n      <div className=\"wordByWordContainer\">\n        {arabic.map((word, i) => (\n          <div className=\"wordsContainer\" key={i}>\n            <div className=\"word arabicTxt\">{word}</div>\n            <div className=\"word transliteration\">{transliteration[i]}</div>\n            <div className=\"word translation\">{translation[i]}</div>\n          </div>\n        ))}\n      </div>\n      <div className=\"transliterationContainer\">\n        {transliteration.map((word, i) => (\n          <span className=\"is-size-6\" key={i}>\n            {`${word} `}\n          </span>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nRecitationSection.propTypes = {\n  recitationId: PropTypes.array.isRequired,\n  recitations: PropTypes.array.isRequired,\n};\n\nexport default RecitationSection;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Subtitle } from \"bloomer\";\nimport RecitationSection from \"./RecitationSection\";\n\n/**\n *\n *          This func checks the `eleType` prop within the `contentObj`\n *          & returns the DOM element tag along with the content within.\n *          @param {contentObj} container of the para within the content\n *\n */\nconst DomContent = ({ contentObj, recitations }) => {\n  const { id, classes, eleType, insertion, txt } = contentObj;\n  // FIXME : recitationId is an array, we should loop to get all\n  // recitations for insertion\n  const { location: recitationLocation, recitationId = [] } = insertion;\n  let recitationRender;\n  let markup;\n  if (recitationLocation === \"before\" || recitationLocation === \"after\") {\n    recitationRender = (\n      <RecitationSection\n        recitationId={recitationId}\n        recitations={recitations}\n      />\n    );\n  }\n  switch (eleType) {\n    case \"h4\":\n      markup = (\n        <>\n          {recitationLocation === \"before\" ? recitationRender : undefined}\n          {txt.map((val, j) => (\n            <h4\n              id={id ? id : undefined}\n              className={classes ? classes : undefined}\n              key={j}\n            >\n              {val}\n            </h4>\n          ))}\n          {recitationLocation === \"after\" ? recitationRender : undefined}\n        </>\n      );\n      break;\n\n    case \"h5\":\n      markup = (\n        <>\n          {recitationLocation === \"before\" ? recitationRender : undefined}\n          {txt.map((val, j) => (\n            <Subtitle\n              id={id ? id : undefined}\n              className={classes ? classes : undefined}\n              key={j}\n            >\n              {val}\n            </Subtitle>\n          ))}\n          {recitationLocation === \"after\" ? recitationRender : undefined}\n        </>\n      );\n      break;\n\n    case \"note\":\n      markup = (\n        <div>\n          {recitationLocation === \"before\" ? recitationRender : \"\"}\n\n          {txt.map((val, j) =>\n            j === 0 ? (\n              <h5 id={id ? id : undefined} className=\"has-text-left\" key={j}>\n                {val}\n              </h5>\n            ) : (\n              <p\n                id={id ? id : undefined}\n                className={classes ? classes : undefined}\n                key={j}\n              >\n                {val}\n              </p>\n            )\n          )}\n          {recitationLocation === \"after\" ? recitationRender : \"\"}\n        </div>\n      );\n      break;\n\n    case \"ol\":\n      markup = (\n        <ol id={id ? id : undefined}>\n          {recitationLocation === \"before\" ? recitationRender : \"\"}\n          {txt.map((val, j) => (\n            <li className={classes ? classes : undefined} key={j}>\n              {val}\n            </li>\n          ))}\n          {recitationLocation === \"after\" ? recitationRender : \"\"}\n        </ol>\n      );\n      break;\n\n    case \"p\":\n      markup = (\n        <div id={id ? id : undefined} className={classes ? classes : undefined}>\n          {recitationLocation === \"before\" ? recitationRender : \"\"}\n\n          {txt.map((para, j) => (\n            <p key={j}>{para}</p>\n          ))}\n          {recitationLocation === \"after\" ? recitationRender : \"\"}\n        </div>\n      );\n      break;\n\n    case \"quote\":\n      markup = (\n        <div id={id ? id : undefined}>\n          {recitationLocation === \"before\" ? recitationRender : \"\"}\n          {txt.map((para, j) => (\n            <blockquote className={classes ? classes : undefined} key={j}>\n              {para}\n            </blockquote>\n          ))}\n          {recitationLocation === \"after\" ? recitationRender : \"\"}\n        </div>\n      );\n      break;\n\n    default: {\n      markup = <></>;\n    }\n  }\n  return markup;\n};\n\nDomContent.propTypes = {\n  contentObj: PropTypes.object.isRequired,\n  recitations: PropTypes.array.isRequired,\n};\n\nexport default DomContent;\n"],"sourceRoot":""}